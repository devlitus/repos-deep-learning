"""
An√°lisis Exploratorio del Dataset MovieLens 100K
Paso 1: Cargar y entender los datos
"""
import sys
import io
from pathlib import Path

# Configurar codificaci√≥n UTF-8 para la salida en consola (Windows)
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Obtener la ruta base del proyecto (directorio amazone)
SCRIPT_DIR = Path(__file__).resolve().parent
PROJECT_DIR = SCRIPT_DIR.parent
DATA_DIR = PROJECT_DIR / 'data' / 'raw' / 'ml-100k'
SRC_DIR = PROJECT_DIR / 'src'

# Crear directorios si no existen
SRC_DIR.mkdir(parents=True, exist_ok=True)

# Configuraci√≥n de visualizaci√≥n
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (12, 6)

# =============================================================================
# PASO 1: CARGAR LOS DATOS
# =============================================================================

print("=" * 60)
print("üìä AN√ÅLISIS EXPLORATORIO - MOVIELENS 100K")
print("=" * 60)

# Cargar ratings (calificaciones)
# Formato: user_id | item_id | rating | timestamp
ratings = pd.read_csv(
    DATA_DIR / 'u.data',
    sep='\t',
    names=['user_id', 'item_id', 'rating', 'timestamp']
)

# Cargar informaci√≥n de pel√≠culas
# Formato: movie_id | title | release_date | ... | g√©neros
movies = pd.read_csv(
    DATA_DIR / 'u.item',
    sep='|',
    encoding='latin-1',
    names=['item_id', 'title', 'release_date', 'video_release_date', 'imdb_url',
           'unknown', 'Action', 'Adventure', 'Animation', 'Children', 'Comedy',
           'Crime', 'Documentary', 'Drama', 'Fantasy', 'Film-Noir', 'Horror',
           'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western']
)

# Cargar informaci√≥n de usuarios
users = pd.read_csv(
    DATA_DIR / 'u.user',
    sep='|',
    names=['user_id', 'age', 'gender', 'occupation', 'zip_code']
)

print("\n‚úÖ Datos cargados exitosamente!")

# =============================================================================
# PASO 2: EXPLORACI√ìN B√ÅSICA
# =============================================================================

print("\n" + "=" * 60)
print("üìã INFORMACI√ìN B√ÅSICA DEL DATASET")
print("=" * 60)

print(f"\nüé¨ Pel√≠culas: {movies.shape[0]:,}")
print(f"üë• Usuarios: {users.shape[0]:,}")
print(f"‚≠ê Ratings totales: {ratings.shape[0]:,}")

print("\nüìä PRIMERAS FILAS DE RATINGS:")
print(ratings.head())

print("\nüìä INFORMACI√ìN DE RATINGS:")
print(ratings.info())

print("\nüìà ESTAD√çSTICAS DE RATINGS:")
print(ratings.describe())

# =============================================================================
# PASO 3: AN√ÅLISIS DE RATINGS
# =============================================================================

print("\n" + "=" * 60)
print("‚≠ê AN√ÅLISIS DE CALIFICACIONES")
print("=" * 60)

# Distribuci√≥n de ratings
rating_counts = ratings['rating'].value_counts().sort_index()
print("\nüìä Distribuci√≥n de calificaciones:")
for rating, count in rating_counts.items():
    percentage = (count / len(ratings)) * 100
    print(f"Rating {rating}: {count:,} ({percentage:.1f}%)")

# Rating promedio
avg_rating = ratings['rating'].mean()
print(f"\nüìä Rating promedio: {avg_rating:.2f}")

# =============================================================================
# PASO 4: AN√ÅLISIS DE USUARIOS
# =============================================================================

print("\n" + "=" * 60)
print("üë• AN√ÅLISIS DE USUARIOS")
print("=" * 60)

# Ratings por usuario
ratings_per_user = ratings.groupby('user_id').size()
print(f"\nüìä Ratings por usuario:")
print(f"  - Promedio: {ratings_per_user.mean():.1f}")
print(f"  - M√≠nimo: {ratings_per_user.min()}")
print(f"  - M√°ximo: {ratings_per_user.max()}")
print(f"  - Mediana: {ratings_per_user.median():.1f}")

# Usuario m√°s activo
most_active_user = ratings_per_user.idxmax()
print(f"\nüèÜ Usuario m√°s activo: {most_active_user} con {ratings_per_user.max()} ratings")

# =============================================================================
# PASO 5: AN√ÅLISIS DE PEL√çCULAS
# =============================================================================

print("\n" + "=" * 60)
print("üé¨ AN√ÅLISIS DE PEL√çCULAS")
print("=" * 60)

# Ratings por pel√≠cula
ratings_per_movie = ratings.groupby('item_id').size()
print(f"\nüìä Ratings por pel√≠cula:")
print(f"  - Promedio: {ratings_per_movie.mean():.1f}")
print(f"  - M√≠nimo: {ratings_per_movie.min()}")
print(f"  - M√°ximo: {ratings_per_movie.max()}")
print(f"  - Mediana: {ratings_per_movie.median():.1f}")

# Pel√≠culas m√°s calificadas
most_rated_movies = ratings.groupby('item_id').size().sort_values(ascending=False).head(10)
print(f"\nüèÜ TOP 10 PEL√çCULAS M√ÅS CALIFICADAS:")
for idx, (movie_id, count) in enumerate(most_rated_movies.items(), 1):
    movie_title = movies[movies['item_id'] == movie_id]['title'].values[0]
    print(f"{idx:2d}. {movie_title}: {count} ratings")

# =============================================================================
# PASO 6: VISUALIZACIONES
# =============================================================================

print("\n" + "=" * 60)
print("üìä GENERANDO VISUALIZACIONES")
print("=" * 60)

# Crear figura con subplots
fig, axes = plt.subplots(2, 2, figsize=(15, 10))
fig.suptitle('An√°lisis Exploratorio - MovieLens 100K', fontsize=16, fontweight='bold')

# 1. Distribuci√≥n de ratings
axes[0, 0].bar(rating_counts.index, rating_counts.values, color='skyblue', edgecolor='black')
axes[0, 0].set_xlabel('Rating')
axes[0, 0].set_ylabel('Frecuencia')
axes[0, 0].set_title('Distribuci√≥n de Calificaciones')
axes[0, 0].grid(axis='y', alpha=0.3)

# 2. Distribuci√≥n de ratings por usuario
axes[0, 1].hist(ratings_per_user, bins=50, color='coral', edgecolor='black')
axes[0, 1].set_xlabel('N√∫mero de ratings')
axes[0, 1].set_ylabel('N√∫mero de usuarios')
axes[0, 1].set_title('Distribuci√≥n de Ratings por Usuario')
axes[0, 1].axvline(ratings_per_user.mean(), color='red', linestyle='--', label=f'Media: {ratings_per_user.mean():.1f}')
axes[0, 1].legend()

# 3. Distribuci√≥n de ratings por pel√≠cula
axes[1, 0].hist(ratings_per_movie, bins=50, color='lightgreen', edgecolor='black')
axes[1, 0].set_xlabel('N√∫mero de ratings')
axes[1, 0].set_ylabel('N√∫mero de pel√≠culas')
axes[1, 0].set_title('Distribuci√≥n de Ratings por Pel√≠cula')
axes[1, 0].axvline(ratings_per_movie.mean(), color='red', linestyle='--', label=f'Media: {ratings_per_movie.mean():.1f}')
axes[1, 0].legend()

# 4. Rating promedio por pel√≠cula (top 20 m√°s calificadas)
top_20_movies = most_rated_movies.head(20).index
top_20_avg_rating = ratings[ratings['item_id'].isin(top_20_movies)].groupby('item_id')['rating'].mean().sort_values(ascending=False)
axes[1, 1].barh(range(len(top_20_avg_rating)), top_20_avg_rating.values, color='plum')
axes[1, 1].set_yticks(range(len(top_20_avg_rating)))
axes[1, 1].set_yticklabels([movies[movies['item_id'] == idx]['title'].values[0][:30] for idx in top_20_avg_rating.index], fontsize=8)
axes[1, 1].set_xlabel('Rating Promedio')
axes[1, 1].set_title('Rating Promedio - Top 20 Pel√≠culas M√°s Calificadas')
axes[1, 1].invert_yaxis()

plt.tight_layout()
output_file = SRC_DIR / 'exploratory_analysis.png'
plt.savefig(output_file, dpi=300, bbox_inches='tight')
print(f"\n‚úÖ Visualizaci√≥n guardada en: {output_file}")

plt.show()

print("\n" + "=" * 60)
print("‚úÖ AN√ÅLISIS EXPLORATORIO COMPLETADO")
print("=" * 60)
print("\nüìù CONCLUSIONES INICIALES:")
print(f"1. Tenemos {ratings.shape[0]:,} ratings de {users.shape[0]} usuarios sobre {movies.shape[0]:,} pel√≠culas")
print(f"2. Rating promedio: {avg_rating:.2f}")
print(f"3. Los usuarios califican en promedio {ratings_per_user.mean():.1f} pel√≠culas")
print(f"4. Las pel√≠culas reciben en promedio {ratings_per_movie.mean():.1f} calificaciones")
print("\nüéØ Siguiente paso: Entender la matriz de ratings y sparsity")